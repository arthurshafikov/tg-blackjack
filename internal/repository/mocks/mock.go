// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	core "github.com/arthurshafikov/tg-blackjack/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockChats is a mock of Chats interface.
type MockChats struct {
	ctrl     *gomock.Controller
	recorder *MockChatsMockRecorder
}

// MockChatsMockRecorder is the mock recorder for MockChats.
type MockChatsMockRecorder struct {
	mock *MockChats
}

// NewMockChats creates a new mock instance.
func NewMockChats(ctrl *gomock.Controller) *MockChats {
	mock := &MockChats{ctrl: ctrl}
	mock.recorder = &MockChatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChats) EXPECT() *MockChatsMockRecorder {
	return m.recorder
}

// CheckChatExists mocks base method.
func (m *MockChats) CheckChatExists(ctx context.Context, telegramChatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChatExists", ctx, telegramChatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckChatExists indicates an expected call of CheckChatExists.
func (mr *MockChatsMockRecorder) CheckChatExists(ctx, telegramChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChatExists", reflect.TypeOf((*MockChats)(nil).CheckChatExists), ctx, telegramChatID)
}

// RegisterChat mocks base method.
func (m *MockChats) RegisterChat(ctx context.Context, telegramChatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterChat", ctx, telegramChatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterChat indicates an expected call of RegisterChat.
func (mr *MockChatsMockRecorder) RegisterChat(ctx, telegramChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChat", reflect.TypeOf((*MockChats)(nil).RegisterChat), ctx, telegramChatID)
}

// MockStatistic is a mock of Statistic interface.
type MockStatistic struct {
	ctrl     *gomock.Controller
	recorder *MockStatisticMockRecorder
}

// MockStatisticMockRecorder is the mock recorder for MockStatistic.
type MockStatisticMockRecorder struct {
	mock *MockStatistic
}

// NewMockStatistic creates a new mock instance.
func NewMockStatistic(ctrl *gomock.Controller) *MockStatistic {
	mock := &MockStatistic{ctrl: ctrl}
	mock.recorder = &MockStatisticMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatistic) EXPECT() *MockStatisticMockRecorder {
	return m.recorder
}

// GetStatistics mocks base method.
func (m *MockStatistic) GetStatistics(ctx context.Context, telegramChatID int64) (core.UsersStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", ctx, telegramChatID)
	ret0, _ := ret[0].(core.UsersStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockStatisticMockRecorder) GetStatistics(ctx, telegramChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockStatistic)(nil).GetStatistics), ctx, telegramChatID)
}

// SetStatistics mocks base method.
func (m *MockStatistic) SetStatistics(ctx context.Context, telegramChatID int64, stats core.UsersStatistics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatistics", ctx, telegramChatID, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatistics indicates an expected call of SetStatistics.
func (mr *MockStatisticMockRecorder) SetStatistics(ctx, telegramChatID, stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatistics", reflect.TypeOf((*MockStatistic)(nil).SetStatistics), ctx, telegramChatID, stats)
}

// MockGames is a mock of Games interface.
type MockGames struct {
	ctrl     *gomock.Controller
	recorder *MockGamesMockRecorder
}

// MockGamesMockRecorder is the mock recorder for MockGames.
type MockGamesMockRecorder struct {
	mock *MockGames
}

// NewMockGames creates a new mock instance.
func NewMockGames(ctrl *gomock.Controller) *MockGames {
	mock := &MockGames{ctrl: ctrl}
	mock.recorder = &MockGamesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGames) EXPECT() *MockGamesMockRecorder {
	return m.recorder
}

// GetActiveGame mocks base method.
func (m *MockGames) GetActiveGame(ctx context.Context, telegramChatID int64) (*core.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveGame", ctx, telegramChatID)
	ret0, _ := ret[0].(*core.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveGame indicates an expected call of GetActiveGame.
func (mr *MockGamesMockRecorder) GetActiveGame(ctx, telegramChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveGame", reflect.TypeOf((*MockGames)(nil).GetActiveGame), ctx, telegramChatID)
}

// NullActiveGame mocks base method.
func (m *MockGames) NullActiveGame(ctx context.Context, telegramChatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NullActiveGame", ctx, telegramChatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NullActiveGame indicates an expected call of NullActiveGame.
func (mr *MockGamesMockRecorder) NullActiveGame(ctx, telegramChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NullActiveGame", reflect.TypeOf((*MockGames)(nil).NullActiveGame), ctx, telegramChatID)
}

// SetActiveGame mocks base method.
func (m *MockGames) SetActiveGame(ctx context.Context, telegramChatID int64, game core.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActiveGame", ctx, telegramChatID, game)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActiveGame indicates an expected call of SetActiveGame.
func (mr *MockGamesMockRecorder) SetActiveGame(ctx, telegramChatID, game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveGame", reflect.TypeOf((*MockGames)(nil).SetActiveGame), ctx, telegramChatID, game)
}

// MockCards is a mock of Cards interface.
type MockCards struct {
	ctrl     *gomock.Controller
	recorder *MockCardsMockRecorder
}

// MockCardsMockRecorder is the mock recorder for MockCards.
type MockCardsMockRecorder struct {
	mock *MockCards
}

// NewMockCards creates a new mock instance.
func NewMockCards(ctrl *gomock.Controller) *MockCards {
	mock := &MockCards{ctrl: ctrl}
	mock.recorder = &MockCardsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCards) EXPECT() *MockCardsMockRecorder {
	return m.recorder
}

// AddCardToDealer mocks base method.
func (m *MockCards) AddCardToDealer(ctx context.Context, telegramChatID int64, card core.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCardToDealer", ctx, telegramChatID, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCardToDealer indicates an expected call of AddCardToDealer.
func (mr *MockCardsMockRecorder) AddCardToDealer(ctx, telegramChatID, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCardToDealer", reflect.TypeOf((*MockCards)(nil).AddCardToDealer), ctx, telegramChatID, card)
}

// AddCardToPlayer mocks base method.
func (m *MockCards) AddCardToPlayer(ctx context.Context, telegramChatID int64, username string, card core.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCardToPlayer", ctx, telegramChatID, username, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCardToPlayer indicates an expected call of AddCardToPlayer.
func (mr *MockCardsMockRecorder) AddCardToPlayer(ctx, telegramChatID, username, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCardToPlayer", reflect.TypeOf((*MockCards)(nil).AddCardToPlayer), ctx, telegramChatID, username, card)
}

// DrawCard mocks base method.
func (m *MockCards) DrawCard(ctx context.Context, telegramChatID int64) (core.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrawCard", ctx, telegramChatID)
	ret0, _ := ret[0].(core.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrawCard indicates an expected call of DrawCard.
func (mr *MockCardsMockRecorder) DrawCard(ctx, telegramChatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawCard", reflect.TypeOf((*MockCards)(nil).DrawCard), ctx, telegramChatID)
}

// DrawCards mocks base method.
func (m *MockCards) DrawCards(ctx context.Context, telegramChatID int64, amount int) (core.Cards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrawCards", ctx, telegramChatID, amount)
	ret0, _ := ret[0].(core.Cards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrawCards indicates an expected call of DrawCards.
func (mr *MockCardsMockRecorder) DrawCards(ctx, telegramChatID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawCards", reflect.TypeOf((*MockCards)(nil).DrawCards), ctx, telegramChatID, amount)
}

// MockPlayers is a mock of Players interface.
type MockPlayers struct {
	ctrl     *gomock.Controller
	recorder *MockPlayersMockRecorder
}

// MockPlayersMockRecorder is the mock recorder for MockPlayers.
type MockPlayersMockRecorder struct {
	mock *MockPlayers
}

// NewMockPlayers creates a new mock instance.
func NewMockPlayers(ctrl *gomock.Controller) *MockPlayers {
	mock := &MockPlayers{ctrl: ctrl}
	mock.recorder = &MockPlayersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayers) EXPECT() *MockPlayersMockRecorder {
	return m.recorder
}

// AddNewPlayer mocks base method.
func (m *MockPlayers) AddNewPlayer(ctx context.Context, telegramChatID int64, player core.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewPlayer", ctx, telegramChatID, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewPlayer indicates an expected call of AddNewPlayer.
func (mr *MockPlayersMockRecorder) AddNewPlayer(ctx, telegramChatID, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewPlayer", reflect.TypeOf((*MockPlayers)(nil).AddNewPlayer), ctx, telegramChatID, player)
}

// CheckIfPlayerIsStopped mocks base method.
func (m *MockPlayers) CheckIfPlayerIsStopped(ctx context.Context, telegramChatID int64, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfPlayerIsStopped", ctx, telegramChatID, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfPlayerIsStopped indicates an expected call of CheckIfPlayerIsStopped.
func (mr *MockPlayersMockRecorder) CheckIfPlayerIsStopped(ctx, telegramChatID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPlayerIsStopped", reflect.TypeOf((*MockPlayers)(nil).CheckIfPlayerIsStopped), ctx, telegramChatID, username)
}

// GetPlayer mocks base method.
func (m *MockPlayers) GetPlayer(ctx context.Context, telegramChatID int64, username string) (*core.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", ctx, telegramChatID, username)
	ret0, _ := ret[0].(*core.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockPlayersMockRecorder) GetPlayer(ctx, telegramChatID, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockPlayers)(nil).GetPlayer), ctx, telegramChatID, username)
}

// StopDrawing mocks base method.
func (m *MockPlayers) StopDrawing(ctx context.Context, telegramChatID int64, player *core.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDrawing", ctx, telegramChatID, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopDrawing indicates an expected call of StopDrawing.
func (mr *MockPlayersMockRecorder) StopDrawing(ctx, telegramChatID, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDrawing", reflect.TypeOf((*MockPlayers)(nil).StopDrawing), ctx, telegramChatID, player)
}
